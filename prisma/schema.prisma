// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int         @id @default(autoincrement())
  email            String      @unique
  password         String
  fullname         String?
  username         String
  gender           GENDER?
  dob              DateTime?
  phoneNumber      String?
  role             ROLE        @default(client)
  isVerified       Boolean?    @default(false)
  profileImg       String?
  verificationCode String?
  myProperty       Property[]
  leases           Leases[]
  complaint        Complaint[]
  updatedAt        DateTime    @updatedAt
  createdAt        DateTime    @default(now())
}

model Property {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  ownerId     Int
  landlord    User        @relation(fields: [ownerId], references: [id])
  location    String?
  totalUnits  Int?
  apartment   Apartment[]
  complaint   Complaint[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Apartment {
  id            Int             @id @default(autoincrement())
  propertyId    Int
  complaint     Complaint[]
  property      Property        @relation(fields: [propertyId], references: [id])
  apartmentName String?
  floor_number  Int?
  status        apartmentStatus
  leases        Leases[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Leases {
  id               Int          @id @default(autoincrement())
  apartmentId      Int
  apartment        Apartment    @relation(fields: [apartmentId], references: [id])
  tenantId         Int
  tenant           User         @relation(fields: [tenantId], references: [id])
  lease_start_date DateTime
  lease_end_date   DateTime?
  monthly_rent     Int
  security_deposit DateTime?
  lease_status     lease_status
  payment_due_day  Int
  payment          Payment[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Payment {
  id              Int            @id @default(autoincrement())
  leaseId         Int
  lease           Leases         @relation(fields: [leaseId], references: [id])
  payment         DateTime
  totalAmount     Int
  remainingAmount Int
  amountPaid      Int
  paymentMethod   String?
  paymentStatus   payment_status
  updatedAt       DateTime       @updatedAt
  createdAt       DateTime       @default(now())
}

model Complaint {
  id            Int       @id @default(autoincrement())
  complainantId Int
  complainant   User      @relation(fields: [complainantId], references: [id])
  propertyId    Int
  property      Property  @relation(fields: [propertyId], references: [id])
  apartmentId   Int
  apartment     Apartment @relation(fields: [apartmentId], references: [id])
  description   String
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
}

enum payment_status {
  paid
  partially
}

enum lease_status {
  active
  terminated
}

enum apartmentStatus {
  vacant
  occupied
  maintenance
}

enum ROLE {
  admin
  owner
  manager
  client
}

enum GENDER {
  male
  female
}
