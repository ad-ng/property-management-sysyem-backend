// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  email            String        @unique
  password         String
  fullname         String?
  username         String
  gender           GENDER?
  dob              DateTime?
  phoneNumber      String?
  role             ROLE          @default(client)
  isVerified       Boolean?      @default(false)
  profileImg       String?
  verificationCode String?
  myProperty       Property[]
  leases           Leases[]
  maintenance      Maintenance[]
  complaint        Complaint[]
  updatedAt        DateTime      @updatedAt
  createdAt        DateTime      @default(now())
}

model Country {
  id        Int        @id @default(autoincrement())
  name      String
  place     Place[]
  province  Province[]
  district  District[]
  sector    Sector[]
  cell      Cell[]
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
}

model Province {
  id        Int        @id @default(autoincrement())
  name      String
  countryId Int
  country   Country    @relation(fields: [countryId], references: [id])
  district  District[]
  sector    Sector[]
  cell      Cell[]
  place     Place[]
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
}

model District {
  id         Int      @id @default(autoincrement())
  name       String
  countryId  Int
  country    Country  @relation(fields: [countryId], references: [id])
  provinceId Int
  province   Province @relation(fields: [provinceId], references: [id])
  sector     Sector[]
  cell       Cell[]
  place      Place[]
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

model Sector {
  id         Int      @id @default(autoincrement())
  name       String
  countryId  Int
  country    Country  @relation(fields: [countryId], references: [id])
  provinceId Int
  province   Province @relation(fields: [provinceId], references: [id])
  districtId Int
  district   District @relation(fields: [districtId], references: [id])
  place      Place[]
  cell       Cell[]
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

model Cell {
  id         Int      @id @default(autoincrement())
  name       String
  countryId  Int
  country    Country  @relation(fields: [countryId], references: [id])
  provinceId Int
  province   Province @relation(fields: [provinceId], references: [id])
  districtId Int
  district   District @relation(fields: [districtId], references: [id])
  sectorId   Int
  sector     Sector   @relation(fields: [sectorId], references: [id])
  place      Place[]
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

model Place {
  id         Int        @id @default(autoincrement())
  countryId  Int
  country    Country    @relation(fields: [countryId], references: [id])
  provinceId Int
  province   Province   @relation(fields: [provinceId], references: [id])
  districtId Int
  district   District   @relation(fields: [districtId], references: [id])
  sectorId   Int
  sector     Sector     @relation(fields: [sectorId], references: [id])
  cellId     Int
  cell       Cell       @relation(fields: [cellId], references: [id])
  property   Property[]
}

model Property {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  ownerId     Int
  landlord    User          @relation(fields: [ownerId], references: [id])
  locationId  Int
  location    Place         @relation(fields: [locationId], references: [id])
  totalUnits  Int?
  apartment   Apartment[]
  maintenance Maintenance[]
  complaint   Complaint[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Apartment {
  id            Int             @id @default(autoincrement())
  propertyId    Int
  complaint     Complaint[]
  property      Property        @relation(fields: [propertyId], references: [id])
  apartmentName String?
  floor_number  Int?
  status        apartmentStatus
  leases        Leases[]
  maintenance   Maintenance[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Leases {
  id               Int          @id @default(autoincrement())
  apartmentId      Int
  apartment        Apartment    @relation(fields: [apartmentId], references: [id])
  tenantEmail      String?
  tenant           User?         @relation(fields: [tenantEmail], references: [email])
  lease_start_date DateTime
  lease_end_date   DateTime?
  monthly_rent     Int
  security_deposit DateTime?
  lease_status     lease_status
  payment_due_day  Int
  payment          Payment[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Payment {
  id              Int            @id @default(autoincrement())
  leaseId         Int
  lease           Leases         @relation(fields: [leaseId], references: [id])
  payment         DateTime
  remainingAmount Int
  amountPaid      Int
  paymentMethod   String?
  paymentStatus   payment_status
  updatedAt       DateTime       @updatedAt
  createdAt       DateTime       @default(now())
}

model Maintenance {
  id          Int       @id @default(autoincrement())
  tenantId    Int
  tenant      User      @relation(fields: [tenantId], references: [id])
  propertyId  Int
  property    Property  @relation(fields: [propertyId], references: [id])
  apartmentId Int
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  description String
  priority    priority  @default(low)
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
}

model Complaint {
  id            Int       @id @default(autoincrement())
  complainantId Int
  complainant   User      @relation(fields: [complainantId], references: [id])
  propertyId    Int
  property      Property  @relation(fields: [propertyId], references: [id])
  apartmentId   Int
  apartment     Apartment @relation(fields: [apartmentId], references: [id])
  description   String
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
}

enum priority {
  low
  medium
  high
}

enum payment_status {
  paid
  partially
}

enum lease_status {
  active
  terminated
}

enum apartmentStatus {
  vacant
  occupied
  maintenance
}

enum ROLE {
  admin
  owner
  manager
  client
}

enum GENDER {
  male
  female
}
